#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import book_crawler_storage_service.BookCrawlerStorageService_Read
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(book_crawler_storage_service.BookCrawlerStorageService_Read.Iface):
  def set_libgen_latest_bookid(self, bookid):
    """
    Parameters:
     - bookid
    """
    pass


class Client(book_crawler_storage_service.BookCrawlerStorageService_Read.Client, Iface):
  def __init__(self, iprot, oprot=None):
    book_crawler_storage_service.BookCrawlerStorageService_Read.Client.__init__(self, iprot, oprot)

  def set_libgen_latest_bookid(self, bookid):
    """
    Parameters:
     - bookid
    """
    self.send_set_libgen_latest_bookid(bookid)
    return self.recv_set_libgen_latest_bookid()

  def send_set_libgen_latest_bookid(self, bookid):
    self._oprot.writeMessageBegin('set_libgen_latest_bookid', TMessageType.CALL, self._seqid)
    args = set_libgen_latest_bookid_args()
    args.bookid = bookid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_libgen_latest_bookid(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_libgen_latest_bookid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_libgen_latest_bookid failed: unknown result");


class Processor(book_crawler_storage_service.BookCrawlerStorageService_Read.Processor, Iface, TProcessor):
  def __init__(self, handler):
    book_crawler_storage_service.BookCrawlerStorageService_Read.Processor.__init__(self, handler)
    self._processMap["set_libgen_latest_bookid"] = Processor.process_set_libgen_latest_bookid

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_set_libgen_latest_bookid(self, seqid, iprot, oprot):
    args = set_libgen_latest_bookid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_libgen_latest_bookid_result()
    result.success = self._handler.set_libgen_latest_bookid(args.bookid)
    oprot.writeMessageBegin("set_libgen_latest_bookid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class set_libgen_latest_bookid_args:
  """
  Attributes:
   - bookid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bookid', None, None, ), # 1
  )

  def __init__(self, bookid=None,):
    self.bookid = bookid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bookid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_libgen_latest_bookid_args')
    if self.bookid is not None:
      oprot.writeFieldBegin('bookid', TType.I64, 1)
      oprot.writeI64(self.bookid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.bookid is None:
      raise TProtocol.TProtocolException(message='Required field bookid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_libgen_latest_bookid_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_libgen_latest_bookid_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
